---
import { Client } from "@notionhq/client"
import { groq } from "../../lib/utils"
import { format } from "date-fns"
import Layout from "../../layouts/Layout.astro"
import { Post } from "../../lib/interfaces"

export async function getStaticPaths() {
  const notion = new Client({ auth: import.meta.env.NOTION_TOKEN })
  const databaseId = import.meta.env.NOTION_DATABASE_ID
  const query = await groq`{
    "posts": *[] | order(properties.publishedAt.date.start desc){
      "_id": id,
      "author": properties.authors.relation[].id,
      "excerpt": properties.excerpt.rich_text,
      "published": properties.publishedAt.date.start,
      "slug": properties.slug.rich_text[0].plain_text,
      "status": properties.status.select.name,
      "tags": properties.tags.multi_select[].name,
      "title": properties.body.title[].plain_text
    }
  }`
  const getProps = async () => {
    const payload: any = {
      path: `databases/${databaseId}/query`,
      method: "POST"
    }
    const { results } = await notion.request(payload)
    return query(results)
  }

  const response1 = await getProps()
  const { posts } = response1 as { posts: Post[] }

  return posts.map(async (post) => {
    const response2 = await notion.pages.retrieve({ page_id: post._id })
    // const { content } = response2 as any
    console.log(response2)
    return {
      params: { slug: post.slug },
      props: { post, content }
    }
  })
}

const { post } = Astro.props as { post: Post, content: any }
---

<Layout title="post">
  <main>
    <div class="container">
      <p>{post.tags.join(", ").toUpperCase()}</p>
      <h1>{post.title}</h1>
      <time datetime={post.published}>
        {format(new Date(post.published), "MMM do, yyyy")}
      </time>
    </div>
  </main>
</Layout>
